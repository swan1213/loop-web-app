import React, { Component } from "react"
import { Table, Grid, Image, Button } from "semantic-ui-react"
import * as api from "./Api"
import styles from "./Markets.module.scss"
import ClipLoader from "react-spinners/ClipLoader"
import { css } from "@emotion/react"
import { Link } from "react-router-dom"

interface MyState {
  showForm: boolean
  tokenData: Array<any>
  color: string
  loading: boolean
  totalMarket: number
  totalPrice: number
}

class Markets extends Component<{}, MyState> {
  constructor(props) {
    super(props)
    this.state = {
      showForm: false,
      tokenData: [],
      color: "#FFFFFF",
      loading: true,
      totalMarket: 0,
      totalPrice: 0,
    }
  }

  componentDidMount() {
    api.fetchTokenData().then((marketData) => {
      const { totalMarket } = this.state
      marketData?.map((data) => {
        this.setState({ totalMarket: totalMarket + parseInt(data.market_cap) })
      })
      marketData?.sort((a, b) => b.market_cap - a.market_cap)
      this.setState({ tokenData: marketData })
    })
  }

  render() {
    const { tokenData } = this.state
    const override = css`
      display: block;
      margin: 0 auto;
      border-color: white;
    `

    function numFormatter(labelValue) {
      // Nine Zeroes for Billions
      return Math.abs(Number(labelValue)) >= 1.0e9
        ? (Math.abs(Number(labelValue)) / 1.0e9).toFixed(2) + "B"
        : // Six Zeroes for Millions
        Math.abs(Number(labelValue)) >= 1.0e6
        ? (Math.abs(Number(labelValue)) / 1.0e6).toFixed(2) + "M"
        : // Three Zeroes for Thousands
        Math.abs(Number(labelValue)) >= 1.0e3
        ? (Math.abs(Number(labelValue)) / 1.0e3).toFixed(2) + "K"
        : Math.abs(Number(labelValue))
    }

    const changeCapOrder = () => {
      let data = [...tokenData]
      data.reverse()
      this.setState({ tokenData: data })
    }

    const changePriceOrder = () => {
      let data = [...tokenData]
      data?.sort(
        (a, b) =>
          parseInt(a.price.split("$")[1]) - parseInt(b.price.split("$")[1])
      )
      if (tokenData[1].price == data[1].price) {
        data?.sort(
          (a, b) =>
            parseInt(b.price.split("$")[1]) - parseInt(a.price.split("$")[1])
        )
      }
      this.setState({ tokenData: data })
    }

    const changeWeekOrder = () => {
      let data = [...tokenData]
      data?.sort((a, b) => a.week - b.week)
      if (tokenData[1].week == data[1].week) {
        data?.sort((a, b) => b.week - a.week)
      }
      this.setState({ tokenData: data })
    }

    const changeDayOrder = () => {
      let data = [...tokenData]
      data?.sort((a, b) => a.day - b.day)
      if (tokenData[1].day == data[1].day) {
        data?.sort((a, b) => b.day - a.day)
      }
      this.setState({ tokenData: data })
    }

    return (
      <>
        <Grid className={styles.marketTable}>
          <h3>Terra Token Prices by Market Cap.</h3>
          <span className={styles.sub}>
            The Total Terra Market Cap is $
            {numFormatter(this.state.totalMarket)} as of today.
          </span>
          {/* <a className={styles.marketTrade} href="/swap">
            Trade Assets (DEX)
          </a> */}

          <Link to="/swap" className={styles.marketTrade}>
            Trade Assets (DEX)
          </Link>

          <Table>
            <Table.Header>
              <Table.Row>
                <Table.Cell width="3">Name</Table.Cell>
                <Table.Cell width="2" onClick={changeDayOrder}>
                  24hr
                </Table.Cell>
                <Table.Cell width="2" onClick={changeWeekOrder}>
                  7d
                </Table.Cell>
                <Table.Cell width="2" onClick={changePriceOrder}>
                  Price
                </Table.Cell>
                <Table.Cell width="2" onClick={changeCapOrder}>
                  Fully Diluted Market Cap
                </Table.Cell>
                <Table.Cell width="2">Links</Table.Cell>
                {/* <Table.Cell width="2">Exchange</Table.Cell> */}
              </Table.Row>
            </Table.Header>
            {tokenData ? (
              <Table.Body>
                {tokenData.map((data) => {
                  // Return the element. Also pass key
                  return (
                    <Table.Row className={styles.portfoliotablerow}>
                      <Table.Cell>
                        <div className={styles.icontable}>
                          <Image
                            style={{ width: "30px", borderRadius: "25px" }}
                            src={data?.icon}
                            alt=""
                          />
                          <p style={{ display: "block" }}>
                            {data.name} <small>({data?.symbal})</small>
                          </p>
                        </div>
                      </Table.Cell>
                      <Table.Cell>
                        {data?.week ? (
                          data?.day > -0.01 ? (
                            <span className="marketUp">{data?.day}%</span>
                          ) : (
                            <span className="marketDown">{data?.day}%</span>
                          )
                        ) : (
                          "?"
                        )}
                      </Table.Cell>
                      <Table.Cell>
                        {data?.week ? (
                          data?.week > -0.01 ? (
                            <span className="marketUp">{data?.week}%</span>
                          ) : (
                            <span className="marketDown">{data?.week}%</span>
                          )
                        ) : (
                          "?"
                        )}
                      </Table.Cell>
                      <Table.Cell>{data?.price ? data?.price : "?"}</Table.Cell>
                      <Table.Cell>
                        {data?.market_cap
                          ? `$${data?.market_cap
                              .toString()
                              .replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`
                          : "?"}
                      </Table.Cell>
                      <Table.Cell>
                        <div>
                          <a href={data?.website} target="_blank">
                            <Button
                              circular
                              icon={
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 16 16"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  {" "}
                                  <path
                                    d="M8.00003 0.5C4.92878 0.5 2.285 2.3525 1.12625 5H2.37869C3.09008 3.66927 4.26367 2.62231 5.68118 2.06592C5.19038 2.82899 4.8012 3.83435 4.55399 5H5.70096C6.18096 2.9225 7.12628 1.625 8.00003 1.625C8.87378 1.625 9.8191 2.9225 10.2991 5H11.4461C11.1989 3.83435 10.8097 2.82899 10.3189 2.06592C11.7364 2.62231 12.91 3.66927 13.6214 5H14.8738C13.7151 2.3525 11.0713 0.5 8.00003 0.5ZM4.48953 5.76025C4.38069 5.76587 4.2772 5.80923 4.19687 5.88288C4.11653 5.95653 4.06437 6.05587 4.04935 6.16382L3.741 8.09814L3.17996 6.80176C3.14355 6.718 3.08346 6.6467 3.00709 6.59662C2.93071 6.54653 2.84136 6.51985 2.75003 6.51985C2.6587 6.51985 2.56935 6.54653 2.49297 6.59662C2.4166 6.6467 2.35651 6.718 2.3201 6.80176L1.75906 8.09814L1.45071 6.16382C1.43484 6.05436 1.38078 5.95403 1.29808 5.88058C1.21538 5.80714 1.10938 5.76529 0.998809 5.76245C0.929494 5.76068 0.86065 5.77431 0.797238 5.80236C0.733826 5.83041 0.677425 5.87217 0.632099 5.92464C0.586773 5.97712 0.553651 6.03899 0.53512 6.1058C0.516588 6.17262 0.513109 6.24271 0.524932 6.31104L1.08743 9.83618C1.10357 9.93624 1.15171 10.0284 1.22462 10.0988C1.29753 10.1692 1.3913 10.214 1.49186 10.2267C1.59243 10.2393 1.69438 10.219 1.78243 10.1688C1.87048 10.1186 1.93989 10.0412 1.98025 9.94824L2.75003 8.16772L3.51981 9.94824C3.56017 10.0412 3.62958 10.1186 3.71763 10.1688C3.80568 10.219 3.90763 10.2393 4.0082 10.2267C4.10876 10.214 4.20253 10.1692 4.27544 10.0988C4.34835 10.0284 4.39649 9.93624 4.41263 9.83618L4.97513 6.31104C4.98757 6.24154 4.98415 6.17014 4.96514 6.10216C4.94612 6.03417 4.912 5.97136 4.86531 5.9184C4.81862 5.86545 4.76058 5.82372 4.69551 5.79634C4.63045 5.76895 4.56003 5.75662 4.48953 5.76025ZM9.73953 5.76025C9.63069 5.76587 9.5272 5.80923 9.44687 5.88288C9.36653 5.95653 9.31437 6.05587 9.29935 6.16382L8.991 8.09814L8.42996 6.80176C8.39355 6.718 8.33346 6.6467 8.25709 6.59662C8.18071 6.54653 8.09136 6.51986 8.00003 6.51986C7.9087 6.51986 7.81935 6.54653 7.74297 6.59662C7.6666 6.6467 7.60651 6.718 7.5701 6.80176L7.00906 8.09814L6.70071 6.16382C6.68484 6.05436 6.63078 5.95403 6.54808 5.88058C6.46538 5.80714 6.35938 5.76529 6.24881 5.76245C6.17949 5.76068 6.11065 5.77431 6.04724 5.80236C5.98383 5.83041 5.92743 5.87217 5.8821 5.92464C5.83677 5.97712 5.80365 6.03899 5.78512 6.1058C5.76659 6.17262 5.76311 6.24271 5.77493 6.31104L6.33743 9.83618C6.35357 9.93624 6.40171 10.0284 6.47462 10.0988C6.54753 10.1692 6.6413 10.214 6.74186 10.2267C6.84243 10.2393 6.94438 10.219 7.03243 10.1688C7.12048 10.1186 7.18989 10.0412 7.23025 9.94824L8.00003 8.16772L8.7698 9.94824C8.81017 10.0412 8.87958 10.1186 8.96763 10.1688C9.05568 10.219 9.15763 10.2393 9.2582 10.2267C9.35876 10.214 9.45253 10.1692 9.52544 10.0988C9.59835 10.0284 9.64649 9.93624 9.66263 9.83618L10.2251 6.31104C10.2376 6.24154 10.2342 6.17014 10.2151 6.10216C10.1961 6.03417 10.162 5.97136 10.1153 5.9184C10.0686 5.86545 10.0106 5.82372 9.94551 5.79634C9.88045 5.76895 9.81003 5.75662 9.73953 5.76025ZM14.9895 5.76025C14.8807 5.76587 14.7772 5.80923 14.6969 5.88288C14.6165 5.95653 14.5644 6.05587 14.5493 6.16382L14.241 8.09814L13.68 6.80176C13.6436 6.718 13.5835 6.6467 13.5071 6.59662C13.4307 6.54653 13.3414 6.51986 13.25 6.51986C13.1587 6.51986 13.0694 6.54653 12.993 6.59662C12.9166 6.6467 12.8565 6.718 12.8201 6.80176L12.2591 8.09814L11.9507 6.16382C11.9348 6.05436 11.8808 5.95403 11.7981 5.88058C11.7154 5.80714 11.6094 5.76529 11.4988 5.76245C11.4295 5.76068 11.3606 5.77431 11.2972 5.80236C11.2338 5.83041 11.1774 5.87217 11.1321 5.92464C11.0868 5.97712 11.0536 6.03899 11.0351 6.1058C11.0166 6.17262 11.0131 6.24271 11.0249 6.31104L11.5874 9.83618C11.6036 9.93624 11.6517 10.0284 11.7246 10.0988C11.7975 10.1692 11.8913 10.214 11.9919 10.2267C12.0924 10.2393 12.1944 10.219 12.2824 10.1688C12.3705 10.1186 12.4399 10.0412 12.4803 9.94824L13.25 8.16772L14.0198 9.94824C14.0602 10.0412 14.1296 10.1186 14.2176 10.1688C14.3057 10.219 14.4076 10.2393 14.5082 10.2267C14.6088 10.214 14.7025 10.1692 14.7754 10.0988C14.8484 10.0284 14.8965 9.93624 14.9126 9.83618L15.4751 6.31104C15.4876 6.24154 15.4842 6.17014 15.4651 6.10216C15.4461 6.03417 15.412 5.97136 15.3653 5.9184C15.3186 5.86545 15.2606 5.82372 15.1955 5.79634C15.1304 5.76895 15.06 5.75662 14.9895 5.76025ZM1.12625 11C2.285 13.6475 4.92878 15.5 8.00003 15.5C11.0713 15.5 13.7151 13.6475 14.8738 11H13.6214C12.91 12.3307 11.7364 13.3777 10.3189 13.9341C10.8097 13.171 11.1989 12.1657 11.4461 11H10.2991C9.8191 13.0775 8.87378 14.375 8.00003 14.375C7.12628 14.375 6.18096 13.0775 5.70096 11H4.55399C4.8012 12.1657 5.19038 13.171 5.68118 13.9341C4.26367 13.3777 3.09008 12.3307 2.37869 11H1.12625Z"
                                    fill="#C83E93"
                                  />{" "}
                                </svg>
                              }
                            />
                          </a>
                          <a href={data?.twitter} target="_blank">
                            <Button
                              circular
                              icon={
                                <svg
                                  width="16"
                                  height="14"
                                  viewBox="0 0 16 14"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M11.0001 0.25C8.96334 0.25 7.31036 1.89577 7.26623 3.92236C5.46539 3.70637 4.29272 3.03307 3.57336 2.36963C2.77561 1.63389 2.52307 0.980225 2.52307 0.980225C2.4862 0.887328 2.42525 0.80593 2.34648 0.744407C2.26772 0.682883 2.17398 0.643454 2.07492 0.630176C1.97586 0.616899 1.87505 0.630252 1.78287 0.668862C1.69068 0.707472 1.61044 0.769945 1.55041 0.849854C1.55041 0.849854 0.87512 1.75 0.87512 3.0625C0.87512 3.81287 1.11204 4.36808 1.39441 4.83862C1.38401 4.83375 1.31384 4.80933 1.31384 4.80933C1.22419 4.76456 1.12421 4.74456 1.02424 4.75138C0.924267 4.75821 0.827932 4.79161 0.745194 4.84814C0.662456 4.90466 0.596319 4.98227 0.553619 5.07292C0.51092 5.16357 0.493209 5.26398 0.502317 5.36377C0.502317 5.36377 0.718822 6.94632 2.20666 8.10303L2.05139 8.14185C1.9671 8.16289 1.88884 8.20316 1.82272 8.25952C1.75661 8.31587 1.70444 8.38677 1.67032 8.46666C1.63619 8.54655 1.62103 8.63326 1.62602 8.71999C1.63101 8.80671 1.65603 8.89111 1.69909 8.96655C1.69909 8.96655 1.95139 9.39333 2.47986 9.84253C2.79319 10.1089 3.25347 10.3837 3.79602 10.6379C3.12972 10.8814 2.13618 11.125 0.68762 11.125C0.579527 11.125 0.47372 11.1561 0.382856 11.2147C0.291991 11.2732 0.219918 11.3567 0.175259 11.4551C0.1306 11.5536 0.115245 11.6628 0.131033 11.7697C0.14682 11.8767 0.193081 11.9768 0.26428 12.0581C0.26428 12.0581 0.694117 12.5316 1.54382 12.9436C2.39353 13.3556 3.70242 13.75 5.56262 13.75C8.83251 13.75 11.1819 12.1814 12.6481 10.1934C14.1143 8.20529 14.7501 5.82292 14.7501 4C14.7501 3.88433 14.7429 3.77029 14.7325 3.65723C15.5243 2.89435 15.8214 2.32084 15.8356 2.29272C15.9068 2.14985 15.8803 1.97826 15.7697 1.86426C15.6594 1.74988 15.4885 1.71767 15.3434 1.78442L15.2826 1.81226C15.2305 1.83626 15.1784 1.86041 15.1259 1.88403C15.2785 1.64066 15.3989 1.38058 15.4825 1.11133C15.529 0.962828 15.4788 0.800102 15.3558 0.704102C15.2328 0.608102 15.0634 0.597824 14.9303 0.679199C14.472 0.95776 14.0326 1.15277 13.5753 1.28345C12.9023 0.645052 11.9964 0.25 11.0001 0.25ZM11.0001 1.375C12.4563 1.375 13.6251 2.54381 13.6251 4C13.6251 5.55208 13.0422 7.76346 11.7428 9.52539C10.4434 11.2873 8.48023 12.625 5.56262 12.625C4.15067 12.625 3.21144 12.3696 2.50769 12.0933C3.24487 11.9788 3.8796 11.826 4.33581 11.6494C5.12694 11.3432 5.55383 10.9895 5.55383 10.9895C5.63213 10.9223 5.69044 10.8348 5.72238 10.7367C5.75432 10.6386 5.75865 10.5336 5.73491 10.4332C5.71117 10.3328 5.66026 10.2408 5.58776 10.1674C5.51526 10.0939 5.42396 10.0419 5.32385 10.0168C4.30283 9.76159 3.64799 9.34874 3.23718 9.00464L3.82385 8.85815C3.93987 8.8292 4.04365 8.76403 4.12012 8.6721C4.19659 8.58016 4.24178 8.46626 4.24913 8.3469C4.25647 8.22755 4.2256 8.10896 4.16098 8.00835C4.09636 7.90773 4.00136 7.83032 3.88977 7.78735C2.67285 7.31931 2.16183 6.65739 1.90051 6.10278C2.2185 6.16861 2.51458 6.25 2.93762 6.25C3.0643 6.2499 3.18723 6.20704 3.28652 6.12837C3.38581 6.0497 3.45564 5.93982 3.48471 5.81652C3.51378 5.69322 3.50038 5.56372 3.44668 5.44899C3.39298 5.33425 3.30213 5.241 3.18884 5.18433C3.18884 5.18433 2.00012 4.6375 2.00012 3.0625C2.00012 2.77973 2.07844 2.60063 2.13562 2.38647C2.33181 2.65013 2.4935 2.90447 2.81018 3.19653C3.77568 4.08698 5.37151 4.99493 7.78259 5.12427C7.85888 5.12834 7.93521 5.11683 8.0069 5.09043C8.0786 5.06404 8.14417 5.02332 8.19961 4.97075C8.25506 4.91819 8.29921 4.85488 8.32939 4.78469C8.35956 4.7145 8.37512 4.6389 8.37512 4.5625V4C8.37512 2.54381 9.54393 1.375 11.0001 1.375Z"
                                    fill="#C83E93"
                                  />
                                </svg>
                              }
                            />
                          </a>
                          <a href={data?.telegram} target="_blank">
                            <Button
                              circular
                              icon={
                                <svg
                                  width="16"
                                  height="15"
                                  viewBox="0 0 16 15"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M13.9405 1.75598C14.5731 1.75598 14.7396 2.23448 14.5525 3.35798C14.3384 4.64273 13.7215 8.89636 13.2295 11.5442C13.0412 12.5575 12.7019 12.9944 12.208 12.9944C11.9365 12.9944 11.6185 12.8624 11.2532 12.6212C10.7582 12.2942 8.25922 10.6416 7.7166 10.2535C7.2216 9.89986 6.53873 9.47423 7.39523 8.63648C7.7001 8.33798 9.69773 6.43036 11.254 4.94573C11.4201 4.78711 11.281 4.54523 11.0965 4.54523C11.0545 4.54523 11.0099 4.55798 10.9664 4.58686C8.8686 5.97811 5.95973 7.90898 5.5896 8.16061C5.21948 8.41186 4.85873 8.57311 4.37798 8.57311C4.13235 8.57311 3.85523 8.53111 3.52935 8.43736C2.80073 8.22811 2.08935 7.97873 1.81223 7.88348C0.745351 7.51748 0.998476 7.04311 2.0346 6.58711C6.18885 4.75973 11.5645 2.53148 12.3066 2.22323C13.0296 1.92286 13.5666 1.75598 13.9405 1.75598ZM13.9405 0.630981C13.4275 0.630981 12.8098 0.796356 11.8757 1.18373L11.7636 1.23023C7.77548 2.88623 4.15935 4.42298 1.5816 5.55698C1.17885 5.73436 -0.0462744 6.27323 0.00135061 7.40048C0.0216006 7.88686 0.289351 8.54986 1.44735 8.94698L1.53285 8.97623C1.8561 9.08761 2.52923 9.31973 3.21923 9.51811C3.63923 9.63886 4.01873 9.69736 4.37835 9.69736C5.00235 9.69736 5.48573 9.51923 5.86373 9.31186C5.86185 9.37486 5.86335 9.43823 5.86823 9.50198C5.93648 10.369 6.60698 10.8445 7.00748 11.1287L7.06335 11.1685C7.65473 11.5915 10.3311 13.3596 10.6341 13.5595C11.2045 13.936 11.7194 14.1186 12.2087 14.1186C12.9782 14.1186 13.9724 13.7076 14.3361 11.7494C14.6815 9.89198 15.0805 7.29736 15.3719 5.40286C15.496 4.59436 15.598 3.93136 15.6629 3.54248C15.7937 2.75723 15.8537 1.86773 15.3074 1.22311C15.0779 0.953107 14.6549 0.630981 13.9405 0.630981Z"
                                    fill="#C83E93"
                                  />
                                </svg>
                              }
                            />
                          </a>
                        </div>
                      </Table.Cell>
                      {/* <Table.Cell>
                        <a href="/">
                          <Button>Trade</Button>
                        </a>
                      </Table.Cell> */}
                    </Table.Row>
                  )
                })}
              </Table.Body>
            ) : (
              <div className={styles.marketLoader}>
                <ClipLoader
                  color={this.state.color}
                  loading={this.state.loading}
                  css={override}
                  size={50}
                />
              </div>
            )}
          </Table>
        </Grid>
        <div className="cz-tokens-mobile">
          {tokenData && (
            <div className="cz-tokens-mobile-tr">
              <div className="markets staking-table token-table-cz">
                <h3>Terra Token Prices by Market Cap</h3>
                <span className="sub">
                  The Total Terra Market Cap is $
                  {numFormatter(this.state.totalMarket)} as of today
                </span>
              </div>
              {tokenData.map((data) => {
                return (
                  <div>
                    <div className="cz-tokens-mobile-td cz-left-td">
                      <Grid>
                        <div className="labeling">
                          Name
                          <div className="icon-table">
                            <Image
                              style={{ width: "40px", borderRadius: "25px" }}
                              src={data?.icon}
                              alt=""
                            />
                            <p style={{ display: "block" }}>
                              {data.name} <small>({data?.symbal})</small>
                            </p>
                          </div>
                        </div>
                      </Grid>
                      <Grid>
                        Price
                        <p style={{ fontSize: "19px" }}>
                          {" "}
                          {data?.price == "?" ? "?" : data.price}
                        </p>
                      </Grid>
                      <Grid>
                        Links
                        <p>
                          <a
                            href={data?.website}
                            target="_blank"
                            style={{ padding: "0 !important" }}
                          >
                            <Button
                              circular
                              icon={
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 16 16"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  {" "}
                                  <path
                                    d="M8.00003 0.5C4.92878 0.5 2.285 2.3525 1.12625 5H2.37869C3.09008 3.66927 4.26367 2.62231 5.68118 2.06592C5.19038 2.82899 4.8012 3.83435 4.55399 5H5.70096C6.18096 2.9225 7.12628 1.625 8.00003 1.625C8.87378 1.625 9.8191 2.9225 10.2991 5H11.4461C11.1989 3.83435 10.8097 2.82899 10.3189 2.06592C11.7364 2.62231 12.91 3.66927 13.6214 5H14.8738C13.7151 2.3525 11.0713 0.5 8.00003 0.5ZM4.48953 5.76025C4.38069 5.76587 4.2772 5.80923 4.19687 5.88288C4.11653 5.95653 4.06437 6.05587 4.04935 6.16382L3.741 8.09814L3.17996 6.80176C3.14355 6.718 3.08346 6.6467 3.00709 6.59662C2.93071 6.54653 2.84136 6.51985 2.75003 6.51985C2.6587 6.51985 2.56935 6.54653 2.49297 6.59662C2.4166 6.6467 2.35651 6.718 2.3201 6.80176L1.75906 8.09814L1.45071 6.16382C1.43484 6.05436 1.38078 5.95403 1.29808 5.88058C1.21538 5.80714 1.10938 5.76529 0.998809 5.76245C0.929494 5.76068 0.86065 5.77431 0.797238 5.80236C0.733826 5.83041 0.677425 5.87217 0.632099 5.92464C0.586773 5.97712 0.553651 6.03899 0.53512 6.1058C0.516588 6.17262 0.513109 6.24271 0.524932 6.31104L1.08743 9.83618C1.10357 9.93624 1.15171 10.0284 1.22462 10.0988C1.29753 10.1692 1.3913 10.214 1.49186 10.2267C1.59243 10.2393 1.69438 10.219 1.78243 10.1688C1.87048 10.1186 1.93989 10.0412 1.98025 9.94824L2.75003 8.16772L3.51981 9.94824C3.56017 10.0412 3.62958 10.1186 3.71763 10.1688C3.80568 10.219 3.90763 10.2393 4.0082 10.2267C4.10876 10.214 4.20253 10.1692 4.27544 10.0988C4.34835 10.0284 4.39649 9.93624 4.41263 9.83618L4.97513 6.31104C4.98757 6.24154 4.98415 6.17014 4.96514 6.10216C4.94612 6.03417 4.912 5.97136 4.86531 5.9184C4.81862 5.86545 4.76058 5.82372 4.69551 5.79634C4.63045 5.76895 4.56003 5.75662 4.48953 5.76025ZM9.73953 5.76025C9.63069 5.76587 9.5272 5.80923 9.44687 5.88288C9.36653 5.95653 9.31437 6.05587 9.29935 6.16382L8.991 8.09814L8.42996 6.80176C8.39355 6.718 8.33346 6.6467 8.25709 6.59662C8.18071 6.54653 8.09136 6.51986 8.00003 6.51986C7.9087 6.51986 7.81935 6.54653 7.74297 6.59662C7.6666 6.6467 7.60651 6.718 7.5701 6.80176L7.00906 8.09814L6.70071 6.16382C6.68484 6.05436 6.63078 5.95403 6.54808 5.88058C6.46538 5.80714 6.35938 5.76529 6.24881 5.76245C6.17949 5.76068 6.11065 5.77431 6.04724 5.80236C5.98383 5.83041 5.92743 5.87217 5.8821 5.92464C5.83677 5.97712 5.80365 6.03899 5.78512 6.1058C5.76659 6.17262 5.76311 6.24271 5.77493 6.31104L6.33743 9.83618C6.35357 9.93624 6.40171 10.0284 6.47462 10.0988C6.54753 10.1692 6.6413 10.214 6.74186 10.2267C6.84243 10.2393 6.94438 10.219 7.03243 10.1688C7.12048 10.1186 7.18989 10.0412 7.23025 9.94824L8.00003 8.16772L8.7698 9.94824C8.81017 10.0412 8.87958 10.1186 8.96763 10.1688C9.05568 10.219 9.15763 10.2393 9.2582 10.2267C9.35876 10.214 9.45253 10.1692 9.52544 10.0988C9.59835 10.0284 9.64649 9.93624 9.66263 9.83618L10.2251 6.31104C10.2376 6.24154 10.2342 6.17014 10.2151 6.10216C10.1961 6.03417 10.162 5.97136 10.1153 5.9184C10.0686 5.86545 10.0106 5.82372 9.94551 5.79634C9.88045 5.76895 9.81003 5.75662 9.73953 5.76025ZM14.9895 5.76025C14.8807 5.76587 14.7772 5.80923 14.6969 5.88288C14.6165 5.95653 14.5644 6.05587 14.5493 6.16382L14.241 8.09814L13.68 6.80176C13.6436 6.718 13.5835 6.6467 13.5071 6.59662C13.4307 6.54653 13.3414 6.51986 13.25 6.51986C13.1587 6.51986 13.0694 6.54653 12.993 6.59662C12.9166 6.6467 12.8565 6.718 12.8201 6.80176L12.2591 8.09814L11.9507 6.16382C11.9348 6.05436 11.8808 5.95403 11.7981 5.88058C11.7154 5.80714 11.6094 5.76529 11.4988 5.76245C11.4295 5.76068 11.3606 5.77431 11.2972 5.80236C11.2338 5.83041 11.1774 5.87217 11.1321 5.92464C11.0868 5.97712 11.0536 6.03899 11.0351 6.1058C11.0166 6.17262 11.0131 6.24271 11.0249 6.31104L11.5874 9.83618C11.6036 9.93624 11.6517 10.0284 11.7246 10.0988C11.7975 10.1692 11.8913 10.214 11.9919 10.2267C12.0924 10.2393 12.1944 10.219 12.2824 10.1688C12.3705 10.1186 12.4399 10.0412 12.4803 9.94824L13.25 8.16772L14.0198 9.94824C14.0602 10.0412 14.1296 10.1186 14.2176 10.1688C14.3057 10.219 14.4076 10.2393 14.5082 10.2267C14.6088 10.214 14.7025 10.1692 14.7754 10.0988C14.8484 10.0284 14.8965 9.93624 14.9126 9.83618L15.4751 6.31104C15.4876 6.24154 15.4842 6.17014 15.4651 6.10216C15.4461 6.03417 15.412 5.97136 15.3653 5.9184C15.3186 5.86545 15.2606 5.82372 15.1955 5.79634C15.1304 5.76895 15.06 5.75662 14.9895 5.76025ZM1.12625 11C2.285 13.6475 4.92878 15.5 8.00003 15.5C11.0713 15.5 13.7151 13.6475 14.8738 11H13.6214C12.91 12.3307 11.7364 13.3777 10.3189 13.9341C10.8097 13.171 11.1989 12.1657 11.4461 11H10.2991C9.8191 13.0775 8.87378 14.375 8.00003 14.375C7.12628 14.375 6.18096 13.0775 5.70096 11H4.55399C4.8012 12.1657 5.19038 13.171 5.68118 13.9341C4.26367 13.3777 3.09008 12.3307 2.37869 11H1.12625Z"
                                    fill="#C83E93"
                                  />{" "}
                                </svg>
                              }
                            />
                          </a>
                          <a
                            href={data?.twitter}
                            target="_blank"
                            style={{ padding: "0 !important" }}
                          >
                            <Button
                              circular
                              icon={
                                <svg
                                  width="16"
                                  height="14"
                                  viewBox="0 0 16 14"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M11.0001 0.25C8.96334 0.25 7.31036 1.89577 7.26623 3.92236C5.46539 3.70637 4.29272 3.03307 3.57336 2.36963C2.77561 1.63389 2.52307 0.980225 2.52307 0.980225C2.4862 0.887328 2.42525 0.80593 2.34648 0.744407C2.26772 0.682883 2.17398 0.643454 2.07492 0.630176C1.97586 0.616899 1.87505 0.630252 1.78287 0.668862C1.69068 0.707472 1.61044 0.769945 1.55041 0.849854C1.55041 0.849854 0.87512 1.75 0.87512 3.0625C0.87512 3.81287 1.11204 4.36808 1.39441 4.83862C1.38401 4.83375 1.31384 4.80933 1.31384 4.80933C1.22419 4.76456 1.12421 4.74456 1.02424 4.75138C0.924267 4.75821 0.827932 4.79161 0.745194 4.84814C0.662456 4.90466 0.596319 4.98227 0.553619 5.07292C0.51092 5.16357 0.493209 5.26398 0.502317 5.36377C0.502317 5.36377 0.718822 6.94632 2.20666 8.10303L2.05139 8.14185C1.9671 8.16289 1.88884 8.20316 1.82272 8.25952C1.75661 8.31587 1.70444 8.38677 1.67032 8.46666C1.63619 8.54655 1.62103 8.63326 1.62602 8.71999C1.63101 8.80671 1.65603 8.89111 1.69909 8.96655C1.69909 8.96655 1.95139 9.39333 2.47986 9.84253C2.79319 10.1089 3.25347 10.3837 3.79602 10.6379C3.12972 10.8814 2.13618 11.125 0.68762 11.125C0.579527 11.125 0.47372 11.1561 0.382856 11.2147C0.291991 11.2732 0.219918 11.3567 0.175259 11.4551C0.1306 11.5536 0.115245 11.6628 0.131033 11.7697C0.14682 11.8767 0.193081 11.9768 0.26428 12.0581C0.26428 12.0581 0.694117 12.5316 1.54382 12.9436C2.39353 13.3556 3.70242 13.75 5.56262 13.75C8.83251 13.75 11.1819 12.1814 12.6481 10.1934C14.1143 8.20529 14.7501 5.82292 14.7501 4C14.7501 3.88433 14.7429 3.77029 14.7325 3.65723C15.5243 2.89435 15.8214 2.32084 15.8356 2.29272C15.9068 2.14985 15.8803 1.97826 15.7697 1.86426C15.6594 1.74988 15.4885 1.71767 15.3434 1.78442L15.2826 1.81226C15.2305 1.83626 15.1784 1.86041 15.1259 1.88403C15.2785 1.64066 15.3989 1.38058 15.4825 1.11133C15.529 0.962828 15.4788 0.800102 15.3558 0.704102C15.2328 0.608102 15.0634 0.597824 14.9303 0.679199C14.472 0.95776 14.0326 1.15277 13.5753 1.28345C12.9023 0.645052 11.9964 0.25 11.0001 0.25ZM11.0001 1.375C12.4563 1.375 13.6251 2.54381 13.6251 4C13.6251 5.55208 13.0422 7.76346 11.7428 9.52539C10.4434 11.2873 8.48023 12.625 5.56262 12.625C4.15067 12.625 3.21144 12.3696 2.50769 12.0933C3.24487 11.9788 3.8796 11.826 4.33581 11.6494C5.12694 11.3432 5.55383 10.9895 5.55383 10.9895C5.63213 10.9223 5.69044 10.8348 5.72238 10.7367C5.75432 10.6386 5.75865 10.5336 5.73491 10.4332C5.71117 10.3328 5.66026 10.2408 5.58776 10.1674C5.51526 10.0939 5.42396 10.0419 5.32385 10.0168C4.30283 9.76159 3.64799 9.34874 3.23718 9.00464L3.82385 8.85815C3.93987 8.8292 4.04365 8.76403 4.12012 8.6721C4.19659 8.58016 4.24178 8.46626 4.24913 8.3469C4.25647 8.22755 4.2256 8.10896 4.16098 8.00835C4.09636 7.90773 4.00136 7.83032 3.88977 7.78735C2.67285 7.31931 2.16183 6.65739 1.90051 6.10278C2.2185 6.16861 2.51458 6.25 2.93762 6.25C3.0643 6.2499 3.18723 6.20704 3.28652 6.12837C3.38581 6.0497 3.45564 5.93982 3.48471 5.81652C3.51378 5.69322 3.50038 5.56372 3.44668 5.44899C3.39298 5.33425 3.30213 5.241 3.18884 5.18433C3.18884 5.18433 2.00012 4.6375 2.00012 3.0625C2.00012 2.77973 2.07844 2.60063 2.13562 2.38647C2.33181 2.65013 2.4935 2.90447 2.81018 3.19653C3.77568 4.08698 5.37151 4.99493 7.78259 5.12427C7.85888 5.12834 7.93521 5.11683 8.0069 5.09043C8.0786 5.06404 8.14417 5.02332 8.19961 4.97075C8.25506 4.91819 8.29921 4.85488 8.32939 4.78469C8.35956 4.7145 8.37512 4.6389 8.37512 4.5625V4C8.37512 2.54381 9.54393 1.375 11.0001 1.375Z"
                                    fill="#C83E93"
                                  />
                                </svg>
                              }
                            />
                          </a>
                          <a
                            href={data?.telegram}
                            target="_blank"
                            style={{ padding: "0 !important" }}
                          >
                            <Button
                              circular
                              icon={
                                <svg
                                  width="16"
                                  height="15"
                                  viewBox="import { async } from '../categories/Api';
0 0 16 15"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M13.9405 1.75598C14.5731 1.75598 14.7396 2.23448 14.5525 3.35798C14.3384 4.64273 13.7215 8.89636 13.2295 11.5442C13.0412 12.5575 12.7019 12.9944 12.208 12.9944C11.9365 12.9944 11.6185 12.8624 11.2532 12.6212C10.7582 12.2942 8.25922 10.6416 7.7166 10.2535C7.2216 9.89986 6.53873 9.47423 7.39523 8.63648C7.7001 8.33798 9.69773 6.43036 11.254 4.94573C11.4201 4.78711 11.281 4.54523 11.0965 4.54523C11.0545 4.54523 11.0099 4.55798 10.9664 4.58686C8.8686 5.97811 5.95973 7.90898 5.5896 8.16061C5.21948 8.41186 4.85873 8.57311 4.37798 8.57311C4.13235 8.57311 3.85523 8.53111 3.52935 8.43736C2.80073 8.22811 2.08935 7.97873 1.81223 7.88348C0.745351 7.51748 0.998476 7.04311 2.0346 6.58711C6.18885 4.75973 11.5645 2.53148 12.3066 2.22323C13.0296 1.92286 13.5666 1.75598 13.9405 1.75598ZM13.9405 0.630981C13.4275 0.630981 12.8098 0.796356 11.8757 1.18373L11.7636 1.23023C7.77548 2.88623 4.15935 4.42298 1.5816 5.55698C1.17885 5.73436 -0.0462744 6.27323 0.00135061 7.40048C0.0216006 7.88686 0.289351 8.54986 1.44735 8.94698L1.53285 8.97623C1.8561 9.08761 2.52923 9.31973 3.21923 9.51811C3.63923 9.63886 4.01873 9.69736 4.37835 9.69736C5.00235 9.69736 5.48573 9.51923 5.86373 9.31186C5.86185 9.37486 5.86335 9.43823 5.86823 9.50198C5.93648 10.369 6.60698 10.8445 7.00748 11.1287L7.06335 11.1685C7.65473 11.5915 10.3311 13.3596 10.6341 13.5595C11.2045 13.936 11.7194 14.1186 12.2087 14.1186C12.9782 14.1186 13.9724 13.7076 14.3361 11.7494C14.6815 9.89198 15.0805 7.29736 15.3719 5.40286C15.496 4.59436 15.598 3.93136 15.6629 3.54248C15.7937 2.75723 15.8537 1.86773 15.3074 1.22311C15.0779 0.953107 14.6549 0.630981 13.9405 0.630981Z"
                                    fill="#C83E93"
                                  />
                                </svg>
                              }
                            />
                          </a>
                        </p>
                      </Grid>
                    </div>

                    <div className="cz-tokens-mobile-td cz-left-td">
                      <Grid>
                        Market Cap
                        <p style={{ fontSize: "19px" }}>
                          {data?.market_cap == "?" || data?.market_cap == 0
                            ? "?"
                            : data.market_cap
                                .toString()
                                .replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                        </p>
                      </Grid>
                      <Grid>
                        <div style={{ display: "flex" }}>
                          <div style={{ padding: "0 20px 0 0" }}>
                            24hr
                            <p style={{ fontSize: "14px" }}>
                              {data?.week == "?" ? (
                                "?"
                              ) : data?.day > -0.01 ? (
                                <span className="marketUp">{data?.day}%</span>
                              ) : (
                                <span className="marketDown">{data?.day}%</span>
                              )}
                            </p>
                          </div>
                          <div>
                            7d
                            <p style={{ fontSize: "14px" }}>
                              {data?.week == "?" ? (
                                "?"
                              ) : data?.week > -0.01 ? (
                                <span className="marketUp">{data?.week}%</span>
                              ) : (
                                <span className="marketDown">
                                  {data?.week}%
                                </span>
                              )}
                            </p>
                          </div>
                        </div>
                      </Grid>
                      <Grid>
                        Exchange
                        <div className="BtnTrade">
                          <a href="/">
                            <Button fluid className="btn">
                              Trade
                            </Button>
                          </a>
                        </div>
                      </Grid>
                    </div>
                  </div>
                )
              })}
            </div>
          )}
        </div>
      </>
    )
  }
}
export default Markets
